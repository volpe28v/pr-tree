#!/usr/bin/env ruby

require 'net/https'
require 'uri'
require 'json'

def main
  token = ENV['GITHUB_API_TOKEN']
  if token.nil?
    puts 'Please set the environment variable "GITHUB_API_TOKEN"'
    exit
  end

  unless m = `git config --get remote.origin.url`.match(/git@github.com:(?<owner>.+)\/(?<repo>.+).git/)
    puts 'Run command in github repository'
    exit
  end

  github_client = GitHubClient.new(token, m[:owner], m[:repo])
  branches = github_client.branches
  prs = github_client.pull_requests.map do |pr|
    PrItem.new({
      number: pr['number'],
      title: pr['title'],
      user: pr['user']['login'],
      base: pr['base']['ref'],
      is_latest: pr['base']['sha'] == branches.find{|b| b['name'] == pr['base']['ref']}['commit']['sha'],
      head: pr['head']['ref'],
      url: pr['html_url']
    })
  end

  # puts prs.map{|p| [p.params[:base], "    #{p.params[:head]}"] }

  tree_builder = TreeBuilder.new(prs)
  tree_builder.add_top_item do |key|
    PrItem.new({ head: key })
  end
  tree_builder.show
end

class GitHubClient
  def initialize(token, owner, repo)
    @token = token
    @owner = owner
    @repo = repo
  end

  def branches
    get_request(branches_uri)
  end

  def pull_requests
    get_request(pulls_uri)
  end

  private

  attr_accessor :token, :owner, :repo

  def get_request(uri)
    http = Net::HTTP.new(uri.host, uri.port)

    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    req = Net::HTTP::Get.new(uri.request_uri)
    req["Authorization"] = "token #{token}"

    res = http.request(req)
    unless res.code == '200'
      puts res.code, res.msg
      return nil
    end

    JSON.parse(res.body)
  end

  def pulls_uri
    @pulls_uri ||= URI.parse(base_uri + "/pulls")
  end

  def branches_uri
    @branches_uri ||= URI.parse(base_uri + "/branches")
  end

  def base_uri
    "https://api.github.com/repos/#{owner}/#{repo}"
  end
end

module TreeBuildable
  attr_accessor :children, :parent

  def parent_key
    raise NotImplementedError, "You must implement #{self.class}##{__method__}"
  end

  def key
    raise NotImplementedError, "You must implement #{self.class}##{__method__}"
  end

  def texts
    raise NotImplementedError, "You must implement #{self.class}##{__method__}"
  end
end

class TreeBuilder
  def initialize(items)
    @items = items

    build_tree
  end

  def add_top_item
    parents = @items.select { |item| item.parent == nil }
    @items = parents.group_by { |item| item.parent_key }.to_a.map do |item|
      top_item = yield(item[0])
      top_item.children = item[1]
      top_item
    end
  end

  def show
    show_as_tree(@items, '')
  end

  private

  def build_tree
    @items.each do |item|
      parent = @items.select { |p| p.key == item.parent_key && p.parent_key != item.key }.first
      if parent
        parent.children << item
        item.parent = parent
      end
    end
  end

  def show_as_tree(items, prefix)
    return if items.empty?

    items.each_with_index do |item,i|
      is_last = items.size - 1 == i
      print_item(item, is_last, prefix)

      next_prefix = prefix + next_prefix(is_last)
      show_as_tree(item.children, next_prefix)
    end
  end

  def print_item(item, is_last, prefix)
    texts = item.texts

    texts.each_with_index do |t, i|
      if i == 0
        puts Color.black("#{prefix}#{prefix_head(is_last)}") + t
      else
        puts Color.black("#{prefix}#{prefix_body(is_last)}") + t
      end
    end
  end

  def next_prefix(is_last)
    is_last ? '      ' : ' │    '
  end

  def prefix_head(is_last)
    is_last ?  ' └─' : ' ├─'
  end

  def prefix_body(is_last)
    is_last ? "      " : " │    "
  end
end

class Color
  def self.g(t)
    "\e[32m" + t + Color.end_code
  end
  def self.b(t)
    "\e[34m" + t + Color.end_code
  end
  def self.r(t)
    "\e[31m" + t + Color.end_code
  end
  def self.m(t)
    "\e[35m" + t + Color.end_code
  end
  def self.black(t)
    "\e[30m" + t + Color.end_code
  end
  def self.end_code
    "\e[0m"
  end
end

class PrItem
  include TreeBuildable

  attr_accessor :params

  def initialize(params)
    @params = params
    @children = params[:children] || []
    @parent = params[:parent]
  end

  def parent_key
    @params[:base]
  end

  def key
    @params[:head]
  end

  def texts
    if @params[:number].nil?
      [Color.m("[#{@params[:head].to_s}]")]
    else
      behind_sym = @params[:is_latest] ? ' ' : Color.r("*")
      [
        behind_sym + Color.m("[#{@params[:head].to_s}]"),
        Color.g("#{@params[:title].to_s} ##{@params[:number]}"),
        Color.b(" #{@params[:user].to_s}") + Color.black(" #{@params[:url].to_s}")
      ]
    end
  end
end

main
