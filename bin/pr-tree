#!/usr/bin/env ruby

require 'net/https'
require 'uri'
require 'json'
require 'concurrent'
require 'optparse'

def main
  opt = OptionParser.new
  opt.on('-k', '--keyword KEYWORD', 'filter by keyword') { |v| @keyword  = v }
  opt.on('-r', '--reviewer REVIEWER', 'filter by reviewer') { |v| @reviewer = v }
  opt.on('-u', '--url GIT_URL', 'specific git url') { |v| @url = v }
  opt.on('-m', '--markdown', 'show as markdown') { |v| @markdown = true }
  opt.on('-s', '--status USER', 'show as markdown with user status') { |v| @status = v }
  opt.on('-f', '--files', 'show changed files') { |v| @files = true }
  opt.parse(ARGV)

  git_config = GitConfig.new(@url)
  unless git_config.has_token?
    puts 'Please set the environment variable "GITHUB_API_TOKEN"'
    exit
  end

  unless git_config.github_repo?
    puts 'Run command in github repository or spcify git url with "-u" option.'
    exit
  end

  puts git_config.repo

  github_client = GitHubClient.new(git_config)

  pr_builder = PrBuilder.new(github_client, git_config.branch, @files)
    .filter_keyword!(@keyword)
    .filter_keyword!(@status)
    .filter_reviewer!(@reviewer)

  builder = if @markdown
              MarkdownBuilder.new(pr_builder.prs)
            elsif @status
              StatusBuilder.new(pr_builder.prs, @status)
            else
              TreeBuilder.new(pr_builder.prs)
                .add_top_item {|key| PrItem.new({
                head: key,
                current_branch: key == git_config.branch
              }) }
            end

  builder.show
end

class GitConfig
  attr_reader :token, :owner, :repo, :branch

  def initialize(url)
    @token = ENV['GITHUB_API_TOKEN']
    @owner, @repo = get_repo_info(url)
    @branch = get_current_branch(url)
  end

  def has_token?
    !token.empty?
  end

  def github_repo?
    !(owner.empty? || repo.empty?)
  end

  private

  def get_repo_info(url)
    url = `git config --get remote.origin.url` if url.nil?

    m = url.match(/git@github.com[:\/](?<owner>.+)\/(?<repo>.+).git/)
    return m[:owner], m[:repo]
  end

  def get_current_branch(url)
    `git symbolic-ref --short HEAD`.chomp
  end

end

class GitHubClient
  def initialize(config)
    @token = config.token
    @owner = config.owner
    @repo = config.repo
  end

  def branches
    get_request(branches_uri)
  end

  def pull_requests
    Concurrent::Promise.zip(
      *get_request(pulls_uri).map do |pr|
        Concurrent::Promise.execute do
          pr['status'] = get_request(status_uri(pr['head']['sha']))['state']
          pr['files'] = get_request(files_uri(pr['number']))
          pr
        end
      end
    ).value
  end

  private

  attr_accessor :token, :owner, :repo

  def get_request(uri)
    http = Net::HTTP.new(uri.host, uri.port)

    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    req = Net::HTTP::Get.new(uri.request_uri)
    req["Authorization"] = "token #{token}"

    res = http.request(req)
    unless res.code == '200'
      puts res.code, res.msg
      return nil
    end

    JSON.parse(res.body)
  end

  def pulls_uri
    URI.parse(base_uri + "/pulls")
  end

  def branches_uri
    URI.parse(base_uri + "/branches")
  end

  def status_uri(sha)
    URI.parse(base_uri + "/commits/#{sha}/status")
  end

  def files_uri(pull_number)
    URI.parse(base_uri + "/pulls/#{pull_number}/files")
  end

  def base_uri
    "https://api.github.com/repos/#{owner}/#{repo}"
  end
end

class PrBuilder
  attr_reader :prs

  def initialize(github_client, current_branch, show_files)
    branches, pulls = *Concurrent::Promise.zip(
      Concurrent::Promise.execute { github_client.branches },
      Concurrent::Promise.execute { github_client.pull_requests }
    ).value

    @prs = pulls.map do |pr|
      base_branch = branches.find{|b| b['name'] == pr['base']['ref']}
      PrItem.new({
        number: pr['number'],
        title: pr['title'],
        user: pr['user']['login'],
        reviewers: pr['requested_reviewers'].map{|r| r['login']},
        base: pr['base']['ref'],
        is_latest: base_branch.nil? ? true : pr['base']['sha'] == base_branch['commit']['sha'],
        head: pr['head']['ref'],
        url: pr['html_url'],
        status: pr['status'],
        files: pr['files'].map{|f| { status: f['status'], name: f['filename']} },
        current_branch: pr['head']['ref'] == current_branch,
        show_files: show_files
      })
    end
  end

  def filter_keyword!(keyword)
    @prs = @prs.select {|pr| pr.user_like?(keyword) }
    self
  end

  def filter_reviewer!(reviewer)
    @prs = @prs.select {|pr| pr.reviewer_like?(reviewer) }
    self
  end
end

module TreeBuildable
  attr_accessor :children, :parent

  def has_key_in_parent_bases(key)
    raise NotImplementedError, "You must implement #{self.class}##{__method__}"
  end

  def parent_key
    raise NotImplementedError, "You must implement #{self.class}##{__method__}"
  end

  def key
    raise NotImplementedError, "You must implement #{self.class}##{__method__}"
  end

  def texts
    raise NotImplementedError, "You must implement #{self.class}##{__method__}"
  end
end

class TreeBuilder
  def initialize(items)
    @items = items

    build_tree
  end

  def add_top_item
    parents = @items.select { |item| item.parent == nil }
    @items = parents.group_by { |item| item.parent_key }.to_a.map do |item|
      top_item = yield(item[0])
      top_item.children = item[1]
      top_item
    end
    self
  end

  def show
    show_as_tree(@items, '')
  end

  private

  def build_tree
    @items.each do |item|
      parent = @items.select { |p| p.key == item.parent_key && !p.has_key_in_parent_bases(item.key) }.first
      if parent
        parent.children << item
        item.parent = parent
      end
    end
  end

  def show_as_tree(items, prefix)
    return if items.empty?

    items.each_with_index do |item,i|
      is_last = items.size - 1 == i
      print_item(item, is_last, prefix)

      next_prefix = prefix + next_prefix(is_last)
      show_as_tree(item.children, next_prefix)
    end
  end

  def print_item(item, is_last, prefix)
    texts = item.texts

    texts.each_with_index do |t, i|
      if i == 0
        puts Color.black("#{prefix}#{prefix_head(is_last)}") + t
      else
        puts Color.black("#{prefix}#{prefix_body(is_last)}") + t
      end
    end
  end

  def next_prefix(is_last)
    is_last ? '      ' : ' │    '
  end

  def prefix_head(is_last)
    is_last ?  ' └─' : ' ├─'
  end

  def prefix_body(is_last)
    is_last ? "      " : " │    "
  end
end

class MarkdownBuilder
  def initialize(items)
    @items = items
  end

  def show
    show_as_markdown
  end

  private

  def show_as_markdown
    @items.each do |item|
      print_item(item)
    end
  end

  def print_item(item)
    texts = item.texts

    texts.each_with_index do |t, i|
      if i == 0
        puts Color.black("#{prefix_head}") + t
      else
        puts Color.black("#{prefix_body}") + t
      end
    end
  end

  def prefix_head
    '- [ ] '
  end

  def prefix_body
    '    - '
  end
end

class StatusBuilder < MarkdownBuilder
  def initialize(items, user)
    super(items)
    @user = user
  end

  private

  def show_as_markdown
    return if @items.empty?

    puts Color.black('#### Assigned for review')
    @items.select{ |pr| pr.reviewer_like?(@user)}.each do |item|
      print_item(item)
    end

    puts Color.black('#### Requested for review')
    @items.select{ |pr| pr.requested_review?(@user)}.each do |item|
      print_item(item)
    end

    puts Color.black('#### Work in progress')
    @items.select{ |pr| pr.user_wip?(@user)}.each do |item|
      print_item(item)
    end
  end
end

class Color
  def self.g(t)
    "\e[32m" + t + Color.end_code
  end
  def self.b(t)
    "\e[34m" + t + Color.end_code
  end
  def self.r(t)
    "\e[31m" + t + Color.end_code
  end
  def self.m(t)
    "\e[35m" + t + Color.end_code
  end
  def self.w(t)
    "\e[37m" + t + Color.end_code
  end
  def self.black(t)
    "\e[30m" + t + Color.end_code
  end
  def self.bold(t)
    "\e[33m\e[1m" + t + Color.end_code
  end
  def self.end_code
    "\e[0m"
  end
end

class PrItem
  include TreeBuildable

  attr_accessor :params

  def initialize(params)
    @params = params
    @children = params[:children] || []
    @parent = params[:parent]
    @show_files = params[:show_files]
  end

  def has_key_in_parent_bases(key)
    return false if @parent.nil?

    if parent_key == key
      true
    else
      @parent.has_key_in_parent_bases(key)
    end
  end

  def parent_key
    @params[:base]
  end

  def key
    @params[:head]
  end

  def texts
    if @params[:number].nil?
      [branch_name(@params[:head].to_s)]
    else
      behind_sym = @params[:is_latest] ? ' ' : Color.r("*")
      reviewers = @params[:reviewers].length > 0 ? Color.r(" > #{@params[:reviewers].join(' ')}") : ''
      title = "#{@params[:title].to_s} ##{@params[:number]}"
      [
        behind_sym + branch_name(@params[:head].to_s) + reviewers,
        status + Color.g(title),
        Color.b(" #{@params[:user].to_s}") + Color.black(" #{@params[:url].to_s}"),
        *files
      ]
    end
  end

  def user_like?(keyword)
    return true if keyword.nil?
    (@params[:reviewers] | [@params[:user]]).any? {|u| u.include?(keyword) }
  end

  def user_wip?(keyword)
    return true if keyword.nil?
    @params[:user].include?(keyword) && @params[:reviewers].empty?
  end

  def requested_review?(keyword)
    return true if keyword.nil?
    @params[:user].include?(keyword) && @params[:reviewers].any?
  end

  def reviewer_like?(keyword)
    return true if keyword.nil?
    @params[:reviewers].any? {|u| u.include?(keyword) }
  end

  private

  def status
    case @params[:status]
    when 'success' then
      ''
    when 'failure' then
      Color.r('x ')
    when 'pending' then
      Color.r('o ')
    end
  end

  def branch_name(name)
    if @params[:current_branch]
      Color.bold("[#{name}]")
    else
      Color.m("[#{name}]")
    end
  end

  def files
    return [] unless @show_files

    @params[:files].map do |f|
      "  #{file_status_to_sym(f[:status])} #{f[:name]}"
    end
  end

  def file_status_to_sym(status)
    case status
    when 'modified'
      '*'
    when 'removed'
      '-'
    when 'added'
      '+'
    when 'renamed'
      '>'
    else
      '?'
    end
  end
end

main
